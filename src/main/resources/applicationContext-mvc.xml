<?xml version="1.0" encoding="UTF-8"?>
<beans
    xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:p="http://www.springframework.org/schema/p"    
    xmlns:context = "http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
            http://www.springframework.org/schema/aop 
            http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
            http://www.springframework.org/schema/context 
            http://www.springframework.org/schema/context/spring-context-3.0.xsd
            http://www.springframework.org/schema/tx   
            http://www.springframework.org/schema/tx/spring-tx-3.0.xsd  
            http://www.springframework.org/schema/mvc   
            http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd"
    default-autowire="byName">
    
    <context:component-scan base-package="*" />

	  <bean id="propertyConfigurer" 
	    class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
	      <property name="locations">
	       <list><value>classpath:jdbc.properties</value>
	        <!-- <value>file:src/main/webapp/WEB-INF/conf/jdbc.properties</value> -->
	       </list>                    
	      </property>
	    <!-- 当放在web-inf目录下时，需要用file来命名,classpath则不用 -->
	    <!-- <property name="location" value="classpath:jdbc.properties" /> -->
	     
	 <!--    spring只是默认把当前自身文件存在的目录当成了classpath目录,
	                  所以当有文件跟他在一起时，按ctrl是能关联到的 而且这里不能用classpath*, 无法读取 -->
	    <!-- <property name="location" value="classpath*:mybatis.cfg.xml"></property> -->
	  </bean>
	  <!-- 将对象和json之间转换 -->
		<bean id="mappingJacksonHttpMessageConverter"
		  class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter" >
		  <property name="supportedMediaTypes">
		    <list>
		      <value>text/html;charset=UTF-8</value>
		      <value>text/json;charset=UTF-8</value>
		    </list>
		  </property>
		</bean>
		
		 <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" 
    destroy-method="close">
    <property name="driverClassName" value="${driver}"></property>
    <property name="url" value="${url}" ></property>
    <property name="username" value="${username}"></property>
    <property name="password" value="${password}"></property>
    <property name="initialSize" value="${initialSize}"></property>
    <property name="maxActive" value="${maxActive}"></property>
    <property name="maxIdle" value="${maxIdle}"></property>
    <property name="minIdle" value="${minIdle}"></property>
    <property name="maxWait" value="${maxWait}"></property>    
  </bean>   
  
  <bean id="yssqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="dataSource" ref="dataSource"></property>
    <property name="mapperLocations" value="classpath:mapper/*.xml"></property>
    <property name="typeAliasesPackage" value="bean"></property>
  </bean>
  
  <!-- 配置dao层所在的包 ,以及对应的mapper映射对象-->
  <bean id="mapperConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <property name="basePackage" value="mybatis/dao"></property>
    <property name="sqlSessionFactoryBeanName" value="yssqlSessionFactory"></property>
  </bean>    
  
  <bean id="transactionManager"
    class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="dataSource"></property>
  </bean>  
		
		<!-- 动态代理处理器 -->     
	  <bean id="securityHandler" class="mybatis.dynamicproxy.SecurityHandler"></bean>
	  
	  <bean id="proxyManager" class="mybatis.dynamicproxy.impl.ProxyManagerImpl"></bean>
	  <!-- aop动态代理的应用,可以学习相关源码与cglib辅助理解 -->
	  <!-- 这句也可以不写spring会用到CGLIB,但必须导入库
	    <aop:aspectj-autoproxy proxy-target-class="true" /> 
	    -->
	  <aop:config>
	    <aop:aspect id="myaspect" ref="securityHandler">
	      <aop:pointcut expression="execution(* mybatis.dynamicproxy.impl.*.*(..))" id="allMethod"/>
	      <aop:before method="checkSecurity" pointcut-ref="allMethod"/>
	    </aop:aspect>
	  </aop:config>                                                    
</beans>